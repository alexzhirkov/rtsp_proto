// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: call.proto

package incoming_call_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IncomingCallServiceClient is the client API for IncomingCallService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncomingCallServiceClient interface {
	HandleCall(ctx context.Context, in *IncomingCallRequest, opts ...grpc.CallOption) (*IncomingCallResponse, error)
}

type incomingCallServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIncomingCallServiceClient(cc grpc.ClientConnInterface) IncomingCallServiceClient {
	return &incomingCallServiceClient{cc}
}

func (c *incomingCallServiceClient) HandleCall(ctx context.Context, in *IncomingCallRequest, opts ...grpc.CallOption) (*IncomingCallResponse, error) {
	out := new(IncomingCallResponse)
	err := c.cc.Invoke(ctx, "/incoming_call_service.IncomingCallService/HandleCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncomingCallServiceServer is the server API for IncomingCallService service.
// All implementations must embed UnimplementedIncomingCallServiceServer
// for forward compatibility
type IncomingCallServiceServer interface {
	HandleCall(context.Context, *IncomingCallRequest) (*IncomingCallResponse, error)
	mustEmbedUnimplementedIncomingCallServiceServer()
}

// UnimplementedIncomingCallServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIncomingCallServiceServer struct {
}

func (UnimplementedIncomingCallServiceServer) HandleCall(context.Context, *IncomingCallRequest) (*IncomingCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleCall not implemented")
}
func (UnimplementedIncomingCallServiceServer) mustEmbedUnimplementedIncomingCallServiceServer() {}

// UnsafeIncomingCallServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncomingCallServiceServer will
// result in compilation errors.
type UnsafeIncomingCallServiceServer interface {
	mustEmbedUnimplementedIncomingCallServiceServer()
}

func RegisterIncomingCallServiceServer(s grpc.ServiceRegistrar, srv IncomingCallServiceServer) {
	s.RegisterService(&IncomingCallService_ServiceDesc, srv)
}

func _IncomingCallService_HandleCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomingCallServiceServer).HandleCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/incoming_call_service.IncomingCallService/HandleCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomingCallServiceServer).HandleCall(ctx, req.(*IncomingCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IncomingCallService_ServiceDesc is the grpc.ServiceDesc for IncomingCallService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IncomingCallService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "incoming_call_service.IncomingCallService",
	HandlerType: (*IncomingCallServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleCall",
			Handler:    _IncomingCallService_HandleCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "call.proto",
}
